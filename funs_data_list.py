#get_funs_data.py
funs_data_list = \
    [{'COUNT': 'Syntax:\n  \nCOUNT(<ColumnName>)', 'COUNTA': 'Syntax:\n  \nCOUNTA(<ColumnName>)',
      'MAXA': 'Syntax:\n  \nMAXA(<ColumnName>)',
      'MAXX': 'Syntax:\n  \nMAXX(<Table>,<Expression>)\n \nReturn Values:\n(Scalar)   A single value of any type.\nLargest value found\n  in the expression.',
      'DISTINCTCOUNTNOBLANK': 'Syntax:\n  \nDISTINCTCOUNTNOBLANK(\n<ColumnName>\n)\n \nReturn Values:\n(Scalar)   A single \nThe number of distinct values in ColumnName, ignoring the blank\n  value.',
      'AVERAGEX': 'Syntax:\n  \nAVERAGEX(<Table>,<Expression>)',
      'COUNTAX': 'Syntax:\n  \nCOUNTAX(<Table>,<Expression>)\n \nReturn Values:\n(Scalar)   A single \nReturns the number of values that are non\n  blank by iterating the provided table.',
      'MIN': 'Syntax:\n  \nMIN(\n<ColumnNameOrScalar1>[,\n<Scalar2>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nSmallest value found in the column or in\n  the two expressions.',
      'PRODUCT': 'Syntax:\n  \nPRODUCT(<ColumnName>)\n \nReturn Values:\n(Scalar)   A single \nThe product of the numbers in\n  a column.',
      'PRODUCTX': 'Syntax:\n  \nPRODUCTX(<Table>,<Expression>)\n \nReturn Values:\n(Scalar)   A single \nThe product of the Expression evaluated\n  for each row in the Table.',
      'SUM': 'Syntax:\n  \nSUM(<ColumnName>)\n \nReturn Values:\n(Scalar)   A single value of any type.\nResult of\n  the sum.',
      'AVERAGE': 'Syntax:\n  \nAVERAGE(<ColumnName>)',
      'CALENDARAUTO': 'Syntax:\n  \nCALENDARAUTO([\n<FiscalYearEndMonth>]\n)\n \nReturn Values:\n(Table)   A table with a single column.\nReturns a table with a single column named “Date” containing a contiguous set of dates.\n  The range of dates is calculated automatically based on data in the model.',
      'DATE': 'Syntax:\n  \nDATE(<Year>,<Month>,<Day>)',
      'SUMX': 'Syntax:\n  \nSUMX(<Table>,<Expression>)\n \nReturn Values:\n(Scalar)   A single value of any type.\nResult of\n  the sum.',
      'MINA': 'Syntax:\n  \nMINA(<ColumnName>)\n \nReturn Values:\n(Scalar)   A single value of any type.\nSmallest value found\n  in the column.',
      'DAY': 'Syntax:\n  \nDAY(<Date>)\n \nReturn Values:\n(Scalar)   A single \nAn integer number indicating\n  the day of the month. ',
      'DATEDIFF': 'Syntax:\n  \nDATEDIFF(\n<Date1>,\n<Date2>,\n<Interval>\n)\n \nReturn Values:\n(Scalar)   A single \nThe count of interval boundaries crossed\n  between two dates. ',
      'COUNTX': 'Syntax:\n  \nCOUNTX(<Table>,<Expression>)\n \nReturn Values:\n(Scalar)   A single \nReturns the number of values that are non\n  blank by iterating the provided table.',
      'EDATE': 'Syntax:\n  \nEDATE(<StartDate>,<Months>)', 'DATEVALUE': 'Syntax:\n  \nDATEVALUE(<DateText>)',
      'MINUTE': 'Syntax:\n  \nMINUTE(<Datetime>)\n \nReturn Values:\n(Scalar)   A single \nAn integer number\n  from 0 to 59. ',
      'SECOND': 'Syntax:\n  \nSECOND(<Datetime>)\n \nReturn Values:\n(Scalar)   A single \nAn integer number\n  from 0 to 59. ',
      'MAX': 'Syntax:\n  \nMAX(\n<ColumnNameOrScalar1>[,\n<Scalar2>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nLargest value found in the column\n  or in the two expressions.',
      'TIME': 'Syntax:\n  \nTIME(<Hour>,<Minute>,<Second>)', 'EOMONTH': 'Syntax:\n  \nEOMONTH(<StartDate>,<Months>)',
      'NOW': 'Syntax:\n  \nNOW()\n \nReturn Values:\n(Scalar)   A single \nCurrent date\n  and time.',
      'MINX': 'Syntax:\n  \nMINX(<Table>,<Expression>)\n \nReturn Values:\n(Scalar)   A single value of any type.\nSmallest value found\n  in the expression.',
      'MONTH': 'Syntax:\n  \nMONTH(<Date>)\n \nReturn Values:\n(Scalar)   A single \nAn integer number indicating the\n  number of the month.',
      'UTCNOW': 'Syntax:\n  \nUTCNOW()\n \nReturn Values:\n(Scalar)   A single \nCurrent UTC date\n  and time.',
      'TIMEVALUE': 'Syntax:\n  \nTIMEVALUE(<TimeText>)',
      'CALENDAR': 'Syntax:\n  \nCALENDAR(<StartDate>,<EndDate>)\n \nReturn Values:\n(Table)   A table with a single column.\nReturns a table with a single column named “Date” containing a contiguous set of dates. The range of dates is from the specified start\n  date to the specified end date, inclusive of those two dates.',
      'TODAY': 'Syntax:\n  \nTODAY()\n \nReturn Values:\n(Scalar)   A single \nCurrent\n  date.',
      'AVERAGEA': 'Syntax:\n  \nAVERAGEA(<ColumnName>)',
      'WEEKNUM': 'Syntax:\n  \nWEEKNUM(<Date>[,<ReturnType>])\n \nReturn Values:\n(Scalar)   A single \nThe week number for the\n  given date.',
      'COUNTROWS': 'Syntax:\n  \nCOUNTROWS(<Table>)\n \nReturn Values:\n(Scalar)   A single \nNumber of rows obtained by the evaluation of the table expression. If the table has\n  no rows, it returns blank.',
      'UTCTODAY': 'Syntax:\n  \nUTCTODAY()\n \nReturn Values:\n(Scalar)   A single \nCurrent UTC\n  date.',
      'APPROXIMATEDISTINCTCOUNT': 'Syntax:\n  \nAPPROXIMATEDISTINCTCOUNT(\n<ColumnName>\n)\n \nReturn Values:\n(Scalar)   A single \nThe approximate number of distinct\n  values in ColumnName.',
      'ALLEXCEPT': 'Syntax:\n  \nALLEXCEPT(\n<TableName>,\n<ColumnName>[,\n<ColumnName>[,…]]\n)',
      'YEARFRAC': 'Syntax:\n  \nYEARFRAC(\n<StartDate>,\n<EndDate>[,\n<Basis>]\n)\n \nReturn Values:\n(Scalar)   A single \nFraction of\n  the year.',
      'FILTER': 'Syntax:\n  \nFILTER(\n<Table>,\n<FilterExpression>\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table containing only the\n  filtered rows.',
      'COUNTBLANK': 'Syntax:\n  \nCOUNTBLANK(<ColumnName>)\n \nReturn Values:\n(Scalar)   A single \nIf no rows are found that meet the blank\n  condition, the function returns blank.',
      'ALLCROSSFILTERED': 'Syntax:\n  \nALLCROSSFILTERED(<TableName>)',
      'HOUR': 'Syntax:\n  \nHOUR(<Datetime>)\n \nReturn Values:\n(Scalar)   A single \nAn integer number\n  from 0 to 23. ',
      'WEEKDAY': 'Syntax:\n  \nWEEKDAY(<Date>[,<ReturnType>])\n \nReturn Values:\n(Scalar)   A single \nAn integer number in a range 1-7 or 0-6 according\n  to the choice of the ReturnType parameter.',
      'LOOKUPVALUE': 'Syntax:\n  \nLOOKUPVALUE(\n<Result_ColumnName>,\n<Search_ColumnName>,\n<Search_Value>[,\n<Search_ColumnName>,\n<Search_Value>[,…]][,\n<Alternate_Result>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nThe value of Result_Column at the row where all pairs of Search_Column and Search_Value\n  have a match. ',
      'ALLNOBLANKROW': 'Syntax:\n  \nALLNOBLANKROW(\n<TableNameOrColumnName>[,\n<ColumnName>[,\n<ColumnName>[,…]]]\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nThe result can include blank values if the table has blank values. The only blank that is not\n  included in the result is the one added to the table in case of invalid relationships.',
      'ACCRINTM': 'Syntax:\n  \nACCRINTM(\n<Issue>,\n<Maturity>,\n<Rate>,\n<Par>[,\n<Basis>]\n)',
      'ALL': 'Syntax:\n  \nALL([\n<TableNameOrColumnName>][,\n<ColumnName>[,\n<ColumnName>[,…]]]\n)',
      'QUARTER': 'Syntax:\n  \nQUARTER(<Date>)\n \nReturn Values:\n(Scalar)   A single \nAn integer number indicating\n  the number of the quarter.',
      'CALCULATE': 'Syntax:\n  \nCALCULATE(\n<Expression>[,\n<Filter>[,\n<Filter>[,…]]]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nThe value is the result of the expression\n  evaluated in a modified filter context.',
      'ACCRINT': 'Syntax:\n  \nACCRINT(\n<Issue>,\n<First_interest>,\n<Settlement>,\n<Rate>,\n<Par>,\n<Frequency>[,\n<Basis>][,\n<Calc_method>]\n)',
      'AMORLINC': 'Syntax:\n  \nAMORLINC(\n<Cost>,\n<Date_purchased>,\n<First_period>,\n<Salvage>,\n<Period>,\n<Rate>[,\n<Basis>]\n)',
      'COUPDAYS': 'Syntax:\n  \nCOUPDAYS(\n<Settlement>,\n<Maturity>,\n<Frequency>[,\n<Basis>]\n)',
      'REMOVEFILTERS': 'Syntax:\n  \nREMOVEFILTERS([\n<TableNameOrColumnName>][,\n<ColumnName>[,\n<ColumnName>[,…]]]\n)',
      'ALLSELECTED': 'Syntax:\n  \nALLSELECTED([\n<TableNameOrColumnName>][,\n<ColumnName>[,\n<ColumnName>[,…]]]\n)',
      'YEAR': 'Syntax:\n  \nYEAR(<Date>)\n \nReturn Values:\n(Scalar)   A single \nAn integer in the\n  range 1900-9999. ',
      'COUPNUM': 'Syntax:\n  \nCOUPNUM(\n<Settlement>,\n<Maturity>,\n<Frequency>[,\n<Basis>]\n)',
      'COUPDAYSNC': 'Syntax:\n  \nCOUPDAYSNC(\n<Settlement>,\n<Maturity>,\n<Frequency>[,\n<Basis>]\n)',
      'AMORDEGRC': 'Syntax:\n  \nAMORDEGRC(\n<Cost>,\n<Date_purchased>,\n<First_period>,\n<Salvage>,\n<Period>,\n<Rate>[,\n<Basis>]\n)',
      'CUMPRINC': 'Syntax:\n  \nCUMPRINC(\n<Rate>,\n<Nper>,\n<Pv>,\n<Start_period>,\n<End_period>,\n<Type>\n)',
      'COUPNCD': 'Syntax:\n  \nCOUPNCD(\n<Settlement>,\n<Maturity>,\n<Frequency>[,\n<Basis>]\n)',
      'COUPDAYBS': 'Syntax:\n  \nCOUPDAYBS(\n<Settlement>,\n<Maturity>,\n<Frequency>[,\n<Basis>]\n)',
      'DDB': 'Syntax:\n  \nDDB(\n<Cost>,\n<Salvage>,\n<Life>,\n<Period>[,\n<Factor>]\n)',
      'DISC': 'Syntax:\n  \nDISC(\n<Settlement>,\n<Maturity>,\n<Pr>,\n<Redemption>[,\n<Basis>]\n)',
      'FV': 'Syntax:\n  \nFV(\n<Rate>,\n<Nper>,\n<Pmt>[,\n<Pv>][,\n<Type>]\n)',
      'DOLLARFR': 'Syntax:\n  \nDOLLARFR(\n<Decimal_dollar>,\n<Fraction>\n)',
      'KEEPFILTERS': 'Syntax:\n  \nKEEPFILTERS(<Expression>)',
      'INTRATE': 'Syntax:\n  \nINTRATE(\n<Settlement>,\n<Maturity>,\n<Investment>,\n<Redemption>[,\n<Basis>]\n)',
      'COUPPCD': 'Syntax:\n  \nCOUPPCD(\n<Settlement>,\n<Maturity>,\n<Frequency>[,\n<Basis>]\n)',
      'MDURATION': 'Syntax:\n  \nMDURATION(\n<Settlement>,\n<Maturity>,\n<Coupon>,\n<Yld>,\n<Frequency>[,\n<Basis>]\n)',
      'IPMT': 'Syntax:\n  \nIPMT(\n<Rate>,\n<Per>,\n<Nper>,\n<Pv>[,\n<Fv>][,\n<Type>]\n)',
      'EFFECT': 'Syntax:\n  \nEFFECT(<Nominal_rate>,<Npery>)',
      'DB': 'Syntax:\n  \nDB(\n<Cost>,\n<Salvage>,\n<Life>,\n<Period>[,\n<Month>]\n)',
      'NPER': 'Syntax:\n  \nNPER(\n<Rate>,\n<Pmt>,\n<Pv>[,\n<Fv>][,\n<Type>]\n)',
      'SELECTEDVALUE': 'Syntax:\n  \nSELECTEDVALUE(\n<ColumnName>[,\n<AlternateResult>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nThe value when the context for ColumnName has been filtered\n  down to one distinct value only. Else, AlternateResult. ',
      'ODDFYIELD': 'Syntax:\n  \nODDFYIELD(\n<Settlement>,\n<Maturity>,\n<Issue>,\n<First_coupon>,\n<Rate>,\n<Pr>,\n<Redemption>,\n<Frequency>[,\n<Basis>]\n)',
      'ODDFPRICE': 'Syntax:\n  \nODDFPRICE(\n<Settlement>,\n<Maturity>,\n<Issue>,\n<First_coupon>,\n<Rate>,\n<Yld>,\n<Redemption>,\n<Frequency>[,\n<Basis>]\n)',
      'ISPMT': 'Syntax:\n  \nISPMT(<Rate>,<Per>,<Nper>,<Pv>)', 'PDURATION': 'Syntax:\n  \nPDURATION(<Rate>,<Pv>,<Fv>)',
      'PRICEDISC': 'Syntax:\n  \nPRICEDISC(\n<Settlement>,\n<Maturity>,\n<Discount>,\n<Redemption>[,\n<Basis>]\n)',
      'PRICE': 'Syntax:\n  \nPRICE(\n<Settlement>,\n<Maturity>,\n<Rate>,\n<Yld>,\n<Redemption>,\n<Frequency>[,\n<Basis>]\n)',
      'CUMIPMT': 'Syntax:\n  \nCUMIPMT(\n<Rate>,\n<Nper>,\n<Pv>,\n<Start_period>,\n<End_period>,\n<Type>\n)',
      'ODDLPRICE': 'Syntax:\n  \nODDLPRICE(\n<Settlement>,\n<Maturity>,\n<Last_interest>,\n<Rate>,\n<Yld>,\n<Redemption>,\n<Frequency>[,\n<Basis>]\n)',
      'NOMINAL': 'Syntax:\n  \nNOMINAL(<Effect_rate>,<Npery>)',
      'DOLLARDE': 'Syntax:\n  \nDOLLARDE(\n<Fractional_dollar>,\n<Fraction>\n)',
      'PV': 'Syntax:\n  \nPV(\n<Rate>,\n<Nper>,\n<Pmt>[,\n<Fv>][,\n<Type>]\n)',
      'ODDLYIELD': 'Syntax:\n  \nODDLYIELD(\n<Settlement>,\n<Maturity>,\n<Last_interest>,\n<Rate>,\n<Pr>,\n<Redemption>,\n<Frequency>[,\n<Basis>]\n)',
      'PRICEMAT': 'Syntax:\n  \nPRICEMAT(\n<Settlement>,\n<Maturity>,\n<Issue>,\n<Rate>,\n<Yld>[,\n<Basis>]\n)',
      'RECEIVED': 'Syntax:\n  \nRECEIVED(\n<Settlement>,\n<Maturity>,\n<Investment>,\n<Discount>[,\n<Basis>]\n)',
      'TBILLPRICE': 'Syntax:\n  \nTBILLPRICE(\n<Settlement>,\n<Maturity>,\n<Discount>\n)',
      'TBILLEQ': 'Syntax:\n  \nTBILLEQ(\n<Settlement>,\n<Maturity>,\n<Discount>\n)',
      'DURATION': 'Syntax:\n  \nDURATION(\n<Settlement>,\n<Maturity>,\n<Coupon>,\n<Yld>,\n<Frequency>[,\n<Basis>]\n)',
      'SLN': 'Syntax:\n  \nSLN(<Cost>,<Salvage>,<Life>)',
      'RATE': 'Syntax:\n  \nRATE(\n<Nper>,\n<Pmt>,\n<Pv>[,\n<Fv>][,\n<Type>][,\n<Guess>]\n)',
      'XIRR': 'Syntax:\n  \nXIRR(\n<Table>,\n<Values>,\n<Dates>[,\n<Guess>]\n)\n \nReturn Values:\n(Scalar)   A single \nInternal rate of return for the given inputs. If the calculation fails to return\n  a valid result, an error is returned. ',
      'YIELD': 'Syntax:\n  \nYIELD(\n<Settlement>,\n<Maturity>,\n<Rate>,\n<Pr>,\n<Redemption>,\n<Frequency>[,\n<Basis>]\n)',
      'RRI': 'Syntax:\n  \nRRI(<Nper>,<Pv>,<Fv>)',
      'TBILLYIELD': 'Syntax:\n  \nTBILLYIELD(\n<Settlement>,\n<Maturity>,\n<Pr>\n)',
      'PMT': 'Syntax:\n  \nPMT(\n<Rate>,\n<Nper>,\n<Pv>[,\n<Fv>][,\n<Type>]\n)',
      'SYD': 'Syntax:\n  \nSYD(\n<Cost>,\n<Salvage>,\n<Life>,\n<Per>\n)',
      'CONTAINSSTRING': 'Syntax:\n  \nCONTAINSSTRING(\n<WithinText>,\n<FindText>\n)\n \nReturn Values:\n(Scalar)   A single \nA value of TRUE if the string WithinText contains the string\n  FindText – the comparison is not case-sensitive.',
      'YIELDMAT': 'Syntax:\n  \nYIELDMAT(\n<Settlement>,\n<Maturity>,\n<Issue>,\n<Rate>,\n<Pr>[,\n<Basis>]\n)',
      'PPMT': 'Syntax:\n  \nPPMT(\n<Rate>,\n<Per>,\n<Nper>,\n<Pv>[,\n<Fv>][,\n<Type>]\n)',
      'XNPV': 'Syntax:\n  \nXNPV(\n<Table>,\n<Values>,\n<Dates>,\n<Rate>\n)',
      'CONTAINS': 'Syntax:\n  \nCONTAINS(\n<Table>,\n<ColumnName>,\n<Value>[,\n<ColumnName>,\n<Value>[,…]]\n)',
      'ISBLANK': 'Syntax:\n  \nISBLANK(<Value>)',
      'VDB': 'Syntax:\n  \nVDB(\n<Cost>,\n<Salvage>,\n<Life>,\n<Start_period>,\n<End_period>[,\n<Factor>][,\n<No_switch>]\n)',
      'HASONEFILTER': 'Syntax:\n  \nHASONEFILTER(<ColumnName>)\n \nReturn Values:\n(Scalar)   A single \nTRUE when the number of directly filtered values\n  on ColumnName is one; otherwise returns FALSE. ',
      'CONTAINSSTRINGEXACT': 'Syntax:\n  \nCONTAINSSTRINGEXACT(\n<WithinText>,\n<FindText>\n)\n \nReturn Values:\n(Scalar)   A single \nA value of TRUE if the string WithinText contains the\n  string FindText – the comparison is case-sensitive.',
      'ISEVEN': 'Syntax:\n  \nISEVEN(<Number>)\n \nReturn Values:\n(Scalar)   A single \nReturns TRUE if Number is even, or FALSE if number\n  is odd. ',
      'CONTAINSROW': 'Syntax:\n  \nCONTAINSROW(\n<Table>,\n<Value>[,\n<Value>[,…]]\n)\n \nReturn Values:\n(Scalar)   A single \nA value of TRUE if a row of values exists in a\n  table; otherwise, the function returns FALSE.',
      'CUSTOMDATA': 'Syntax:\n  \nCUSTOMDATA()',
      'HASONEVALUE': 'Syntax:\n  \nHASONEVALUE(<ColumnName>)\n \nReturn Values:\n(Scalar)   A single \nTRUE when the context for ColumnName has been filtered\n  down to one distinct value only. Otherwise is FALSE. ',
      'CALCULATETABLE': 'Syntax:\n  \nCALCULATETABLE(\n<Table>[,\n<Filter>[,\n<Filter>[,…]]]\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nThe value is the result of the expression\n  evaluated in a modified filter context.',
      'ISCROSSFILTERED': 'Syntax:\n  \nISCROSSFILTERED(\n<TableNameOrColumnName>\n)\n \nReturn Values:\n(Scalar)   A single \nTRUE when any column of the table specified or another column\n  a related table is being filtered. Otherwise returns FALSE. ',
      'ISNUMBER': 'Syntax:\n  \nISNUMBER(<Value>)\n \nReturn Values:\n(Scalar)   A single \nTRUE if the value is numeric;\n  otherwise FALSE. ',
      'ISERROR': 'Syntax:\n  \nISERROR(<Value>)\n \nReturn Values:\n(Scalar)   A single \nA Boolean value of TRUE if the value\n  is an error; otherwise FALSE. ',
      'YIELDDISC': 'Syntax:\n  \nYIELDDISC(\n<Settlement>,\n<Maturity>,\n<Pr>,\n<Redemption>[,\n<Basis>]\n)',
      'ISFILTERED': 'Syntax:\n  \nISFILTERED(\n<TableNameOrColumnName>\n)\n \nReturn Values:\n(Scalar)   A single \nTRUE when ColumnName is being filtered directly, or when any\n  column of TableName is being filtered directly.',
      'ISAFTER': 'Syntax:\n  \nISAFTER(\n<Value1>,\n<Value2>[,[\n<Order>][,\n<Value1>,\n<Value2>[,[\n<Order>][,…]]]]\n)\n \nReturn Values:\n(Scalar)   A single \nReturns TRUE when the set of values passed as arguments in Value1 is “greater than” the\n  set of values passed as arguments in Value2.',
      'ISINSCOPE': 'Syntax:\n  \nISINSCOPE(<ColumnName>)\n \nReturn Values:\n(Scalar)   A single \nReturns TRUE if the column is in included in the filter context and it is a\n  grouping column for the current row in the result set.',
      'ISODD': 'Syntax:\n  \nISODD(<Number>)\n \nReturn Values:\n(Scalar)   A single \nReturns TRUE if number is odd,\n  or FALSE if number is even. ',
      'ISLOGICAL': 'Syntax:\n  \nISLOGICAL(<Value>)\n \nReturn Values:\n(Scalar)   A single \nTRUE if the value is a logical value; FALSE if any value\n  other than TRUE or FALSE. ',
      'SELECTEDMEASURENAME': 'Syntax:\n  \nSELECTEDMEASURENAME()\n \nReturn Values:\n(Scalar)   A single \nReturns the name of the measure\n  evaluated.',
      'ISEMPTY': 'Syntax:\n  \nISEMPTY(<Table>)\n \nReturn Values:\n(Scalar)   A single \nTRUE if the table is empty (has no rows), if\n  else, FALSE. ',
      'ISNONTEXT': 'Syntax:\n  \nISNONTEXT(<Value>)',
      'ISTEXT': 'Syntax:\n  \nISTEXT(<Value>)\n \nReturn Values:\n(Scalar)   A single \nTRUE if the value is text; otherwise\n  FALSE.',
      'USERCULTURE': 'Syntax:\n  \nUSERCULTURE()\n \nReturn Values:\n(Scalar)   A single \nThe culture code as a string,\n  such as “en-US”.',
      'SELECTEDMEASURE': 'Syntax:\n  \nSELECTEDMEASURE()\n \nReturn Values:\n(Scalar)   A single value of any type.\nA reference to the measure that is currently in\n  context when the calculation item is evaluated.',
      'AND': 'Syntax:\n  \nAND(<Logical1>,<Logical2>)',
      'SELECTEDMEASUREFORMATSTRING': 'Syntax:\n  \nSELECTEDMEASUREFORMATSTRING()',
      'ISSELECTEDMEASURE': 'Syntax:\n  \nISSELECTEDMEASURE(\n<Measure>[,\n<Measure>[,…]]\n)\n \nReturn Values:\n(Scalar)   A single \nTrue whether the measure that is currently in context\n  is one of those specified in the list of parameters.',
      'IF.EAGER': 'Syntax:\n  \nIF.EAGER(\n<LogicalTest>,\n<ResultIfTrue>[,\n<ResultIfFalse>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nEither ResultIfTrue or ResultIfFalse expression result,\n  depending on LogicalTest.',
      'COALESCE': 'Syntax:\n  \nCOALESCE(\n<Value1>,\n<Value2>[,\n<Value2>[,…]]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nThe first Value argument\n  that is not blank.',
      'IF': 'Syntax:\n  \nIF(\n<LogicalTest>,\n<ResultIfTrue>[,\n<ResultIfFalse>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nEither ResultIfTrue or ResultIfFalse expression result,\n  depending on LogicalTest.',
      'USERNAME': 'Syntax:\n  \nUSERNAME()\n \nReturn Values:\n(Scalar)   A single \nThe username from the credentials given\n  to the system at connection time.',
      'IFERROR': 'Syntax:\n  \nIFERROR(<Value>,<ValueIfError>)\n \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar of the same\n  type as Value',
      'FALSE': 'Syntax:\n  \nFALSE()\n \nReturn Values:\n(Scalar)   A single \nAlways\n  FALSE.',
      'TRUE': 'Syntax:\n  \nTRUE()\n \nReturn Values:\n(Scalar)   A single \nAlways\n  TRUE.',
      'USERPRINCIPALNAME': 'Syntax:\n  \nUSERPRINCIPALNAME()\n \nReturn Values:\n(Scalar)   A single \nReturns the name of the user as their\n  email address, aka user@domain.com.',
      'ISONORAFTER': 'Syntax:\n  \nISONORAFTER(\n<Value1>,\n<Value2>[,[\n<Order>][,\n<Value1>,\n<Value2>[,[\n<Order>][,…]]]]\n)\n \nReturn Values:\n(Scalar)   A single \nReturns TRUE when the set of values passed as arguments in Value1 is “greater than\n  or equal to” the set of values passed as arguments in Value2.',
      'ACOS': 'Syntax:\n  \nACOS(<Number>)',
      'OR': 'Syntax:\n  \nOR(<Logical1>,<Logical2>)\n \nReturn Values:\n(Scalar)   A single \nThe value is TRUE if any of the two arguments is TRUE;\n  the value is FALSE if both the arguments are FALSE. ',
      'SWITCH': 'Syntax:\n  \nSWITCH(\n<Expression>,\n<Value>,\n<Result>[,\n<Value>,\n<Result>[,…]][,\n<Else>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value coming from one of the Result expressions, if there was a match with Value, or from the Else\n  expression, if there was no match with any Value. ',
      'ISSUBTOTAL': 'Syntax:\n  \nISSUBTOTAL(<ColumnName>)\n \nReturn Values:\n(Scalar)   A single \nReturns TRUE if the current row contains a subtotal for a\n  specified column and FALSE otherwise.',
      'ACOSH': 'Syntax:\n  \nACOSH(<Number>)',
      'NOT': 'Syntax:\n  \nNOT(<Logical>)\n \nReturn Values:\n(Scalar)   A single \nTRUE or\n  FALSE',
      'ACOTH': 'Syntax:\n  \nACOTH(<Number>)',
      'USEROBJECTID': 'Syntax:\n  \nUSEROBJECTID()\n \nReturn Values:\n(Scalar)   A single \nIt is the security identifier (SID) in Windows, and another identifier in the Power BI or\n  Azure Analysis Services service.',
      'CEILING': 'Syntax:\n  \nCEILING(\n<Number>,\n<Significance>\n)\n \nReturn Values:\n(Scalar)   A single value of one these types: \nThe number is rounded as specified. The return data type is usually of the same type of\n  the significant argument, with the following exceptions:',
      'ATANH': 'Syntax:\n  \nATANH(<Number>)', 'ACOT': 'Syntax:\n  \nACOT(<Number>)',
      'ATAN': 'Syntax:\n  \nATAN(<Number>)',
      'CONVERT': 'Syntax:\n  \nCONVERT(\n<Expression>,\n<DataType>\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nThe value of the Expression converted\n  to the desired DataType.',
      'COS': 'Syntax:\n  \nCOS(<Number>)\n \nReturn Values:\n(Scalar)   A single \nReturns the cosine of the\n  given angle. ',
      'ASINH': 'Syntax:\n  \nASINH(<Number>)', 'ABS': 'Syntax:\n  \nABS(<Number>)',
      'COSH': 'Syntax:\n  \nCOSH(<Number>)', 'DEGREES': 'Syntax:\n  \nDEGREES(<Number>)',
      'COT': 'Syntax:\n  \nCOT(<Number>)\n \nReturn Values:\n(Scalar)   A single \nReturn the cotangent of an angle specified\n  in radians. ',
      'DIVIDE': 'Syntax:\n  \nDIVIDE(\n<Numerator>,\n<Denominator>[,\n<AlternateResult>]\n)\n \nReturn Values:\n(Scalar)   A single \nResult of the division between Numerator and Denominator,\n  or AlternateResult in case there is a division by zero.',
      'CURRENCY': 'Syntax:\n  \nCURRENCY(<Value>)\n \nReturn Values:\n(Scalar)   A single \nThe value of the expression evaluated and\n  returned as a currency type value.',
      'ASIN': 'Syntax:\n  \nASIN(<Number>)', 'EXP': 'Syntax:\n  \nEXP(<Number>)', 'INT': 'Syntax:\n  \nINT(<Number>)',
      'FACT': 'Syntax:\n  \nFACT(<Number>)\n \nReturn Values:\n(Scalar)   A single \nThe factorial of the argument\n  in a decimal data type.',
      'FLOOR': 'Syntax:\n  \nFLOOR(<Number>,<Significance>)\n \nReturn Values:\n(Scalar)   A single \nNumber down to requested\n  significance',
      'GCD': 'Syntax:\n  \nGCD(<Number1>,<Number2>)\n \nReturn Values:\n(Scalar)   A single \nThe greatest common divisor\n  of two or more integers. ',
      'LCM': 'Syntax:\n  \nLCM(<Number1>,<Number2>)\n \nReturn Values:\n(Scalar)   A single \nReturns the least common\n  multiple of integers. ',
      'ISO.CEILING': 'Syntax:\n  \nISO.CEILING(\n<Number>[,\n<Significance>]\n)\n \nReturn Values:\n(Scalar)   A single value of one these types: \nA number, of the same type as the number argument, rounded as specified.\n  ',
      'MOD': 'Syntax:\n  \nMOD(<Number>,<Divisor>)\n \nReturn Values:\n(Scalar)   A single \nAn integer\n  number.',
      'EVEN': 'Syntax:\n  \nEVEN(<Number>)\n \nReturn Values:\n(Scalar)   A single \nReturns number rounded up to\n  the nearest even integer. ',
      'LOG': 'Syntax:\n  \nLOG(<Number>[,<Base>])\n \nReturn Values:\n(Scalar)   A single \nLogarithm of number to\n  the base specified.',
      'ODD': 'Syntax:\n  \nODD(<Number>)\n \nReturn Values:\n(Scalar)   A single \nReturns number rounded up to\n  the nearest odd integer. ',
      'COTH': 'Syntax:\n  \nCOTH(<Number>)',
      'MROUND': 'Syntax:\n  \nMROUND(<Number>,<Multiple>)\n \nReturn Values:\n(Scalar)   A single \nRounded\n  number.',
      'QUOTIENT': 'Syntax:\n  \nQUOTIENT(\n<Numerator>,\n<Denominator>\n)',
      'PI': 'Syntax:\n  \nPI()\n \nReturn Values:\n(Scalar)   A single \nA decimal number with the value of π, 3.14159265358979, accurate to\n  15 digits.',
      'LN': 'Syntax:\n  \nLN(<Number>)\n \nReturn Values:\n(Scalar)   A single \nThe natural logarithm of the number\n  passed as an argument.',
      'RAND': 'Syntax:\n  \nRAND()\n \nReturn Values:\n(Scalar)   A single \nA random\n  number.',
      'ROUND': 'Syntax:\n  \nROUND(\n<Number>,\n<NumberOfDigits>\n)',
      'ROUNDDOWN': 'Syntax:\n  \nROUNDDOWN(\n<Number>,\n<NumberOfDigits>\n)',
      'RANDBETWEEN': 'Syntax:\n  \nRANDBETWEEN(<Bottom>,<Top>)', 'SIGN': 'Syntax:\n  \nSIGN(<Number>)',
      'ROUNDUP': 'Syntax:\n  \nROUNDUP(\n<Number>,\n<NumberOfDigits>\n)',
      'TAN': 'Syntax:\n  \nTAN(<Number>)\n \nReturn Values:\n(Scalar)   A single \nReturns the tangent of the\n  given angle. ',
      'TRUNC': 'Syntax:\n  \nTRUNC(\n<Number>[,\n<NumberOfDigits>]\n)\n \nReturn Values:\n(Scalar)   A single \nThe truncated\n  number.',
      'SQRT': 'Syntax:\n  \nSQRT(<Number>)\n \nReturn Values:\n(Scalar)   A single \nSquare root\n  of Number.',
      'SIN': 'Syntax:\n  \nSIN(<Number>)\n \nReturn Values:\n(Scalar)   A single \nReturns the sine of\n  the given angle. ',
      'POWER': 'Syntax:\n  \nPOWER(<Number>,<Power>)', 'LOG10': 'Syntax:\n  \nLOG10(<Number>)',
      'EARLIER': 'Syntax:\n  \nEARLIER(\n<ColumnName>[,\n<Number>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nThe current value of row, from ColumnName, at Number of\n  outer evaluation passes. ',
      'TANH': 'Syntax:\n  \nTANH(<Number>)\n \nReturn Values:\n(Scalar)   A single \nReturns the hyperbolic\n  tangent of a number. ',
      'ERROR': 'Syntax:\n  \nERROR(<ErrorText>)',
      'BLANK': 'Syntax:\n  \nBLANK()\n \nReturn Values:\n(Scalar)   A single value of any type.\nThe BLANK value does not\n  have a data type.',
      'RADIANS': 'Syntax:\n  \nRADIANS(<Number>)\n \nReturn Values:\n(Scalar)   A single \nValue of Number in degrees converted to\n  radians.',
      'KEYWORDMATCH': 'Syntax:\n  \nKEYWORDMATCH(\n<MatchExpression>,\n<Text>\n)',
      'EARLIEST': 'Syntax:\n  \nEARLIEST(<ColumnName>)\n \nReturn Values:\n(Scalar)   A single value of any type.\nThe current value of row, from ColumnName,\n  at the outermost row context.',
      'SQRTPI': 'Syntax:\n  \nSQRTPI(<Number>)\n \nReturn Values:\n(Scalar)   A single \nReturns the square root of (number *\n  pi). ',
      'PATH': 'Syntax:\n  \nPATH(\n<ID_ColumnName>,\n<Parent_ColumnName>\n)\n \nReturn Values:\n(Scalar)   A single \nA delimited text string containing the identifiers of all the parents\n  to the current identifier. ',
      'SINH': 'Syntax:\n  \nSINH(<Number>)\n \nReturn Values:\n(Scalar)   A single \nReturns the hyperbolic sine of\n  a number. ',
      'RELATEDTABLE': 'Syntax:\n  \nRELATEDTABLE(<Table>)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table of\n  values.',
      'CROSSFILTER': 'Syntax:\n  \nCROSSFILTER(\n<LeftColumnName>,\n<RightColumnName>,\n<CrossFilterType>\n)',
      'PATHLENGTH': 'Syntax:\n  \nPATHLENGTH(<Path>)',
      'CHISQ.DIST.RT': 'Syntax:\n  \nCHISQ.DIST.RT(\n<X>,\n<Deg_freedom>\n)\n \nReturn Values:\n(Scalar)   A single \nReturns the right-tailed probability of the chi-squared\n  distribution.',
      'BETA.DIST': 'Syntax:\n  \nBETA.DIST(\n<X>,\n<Alpha>,\n<Beta>,\n<Cumulative>[,\n<A>][,\n<B>]\n)\n \nReturn Values:\n(Scalar)   A single \nReturns the beta\n  distribution. ',
      'COMBIN': 'Syntax:\n  \nCOMBIN(\n<Number>,\n<Number_chosen>\n)\n \nReturn Values:\n(Scalar)   A single \nReturns the number of combinations for\n  a given number of items. ',
      'USERELATIONSHIP': 'Syntax:\n  \nUSERELATIONSHIP(\n<ColumnName1>,\n<ColumnName2>\n)',
      'CHISQ.DIST': 'Syntax:\n  \nCHISQ.DIST(\n<X>,\n<Deg_freedom>,\n<Cumulative>\n)',
      'PATHITEMREVERSE': 'Syntax:\n  \nPATHITEMREVERSE(\n<Path>,\n<Position>[,\n<Type>]\n)\n \nReturn Values:\n(Scalar)   A single value of one these types: \nThe n-position ascendant in the given path,\n  counting from current to the oldest. ',
      'PATHCONTAINS': 'Syntax:\n  \nPATHCONTAINS(<Path>,<Item>)\n \nReturn Values:\n(Scalar)   A single \nA value of TRUE if item exists in Path; otherwise\n  FALSE. ',
      'CHISQ.INV.RT': 'Syntax:\n  \nCHISQ.INV.RT(\n<Probability>,\n<Deg_freedom>\n)\n \nReturn Values:\n(Scalar)   A single \nReturns the inverse of the right-tailed probability of the chi-squared\n  distribution. ',
      'CHISQ.INV': 'Syntax:\n  \nCHISQ.INV(\n<Probability>,\n<Deg_freedom>\n)\n \nReturn Values:\n(Scalar)   A single \nReturns the inverse of the left-tailed probability of the\n  chi-squared distribution. ',
      'COMBINA': 'Syntax:\n  \nCOMBINA(\n<Number>,\n<Number_chosen>\n)',
      'BETA.INV': 'Syntax:\n  \nBETA.INV(\n<Probability>,\n<Alpha>,\n<Beta>[,\n<A>][,\n<B>]\n)',
      'PATHITEM': 'Syntax:\n  \nPATHITEM(\n<Path>,\n<Position>[,\n<Type>]\n)',
      'CONFIDENCE.NORM': 'Syntax:\n  \nCONFIDENCE.NORM(\n<Alpha>,\n<Standard_dev>,\n<Size>\n)',
      'RELATED': 'Syntax:\n  \nRELATED(<ColumnName>)',
      'NORM.INV': 'Syntax:\n  \nNORM.INV(\n<Probability>,\n<Mean>,\n<Standard_dev>\n)\n \nReturn Values:\n(Scalar)   A single \nReturns the inverse of the normal cumulative distribution for the specified mean\n  and standard deviation. ',
      'GEOMEANX': 'Syntax:\n  \nGEOMEANX(<Table>,<Expression>)',
      'MEDIAN': 'Syntax:\n  \nMEDIAN(<Column>)\n \nReturn Values:\n(Scalar)   A single \nMedian\n  value',
      'GEOMEAN': 'Syntax:\n  \nGEOMEAN(<ColumnName>)',
      'CONFIDENCE.T': 'Syntax:\n  \nCONFIDENCE.T(\n<Alpha>,\n<Standard_dev>,\n<Size>\n)\n \nReturn Values:\n(Scalar)   A single \nReturns the confidence interval for a population mean,\n  using a Student’s t distribution. ',
      'PERCENTILE.EXC': 'Syntax:\n  \nPERCENTILE.EXC(<Column>,<K>)',
      'NORM.DIST': 'Syntax:\n  \nNORM.DIST(\n<X>,\n<Mean>,\n<Standard_dev>,\n<Cumulative>\n)\n \nReturn Values:\n(Scalar)   A single \nThe normal distribution for the specified\n  mean and standard deviation. ',
      'MEDIANX': 'Syntax:\n  \nMEDIANX(<Table>,<Expression>)\n \nReturn Values:\n(Scalar)   A single \nMedian\n  value',
      'PERMUT': 'Syntax:\n  \nPERMUT(\n<Number>,\n<Number_chosen>\n)\n \nReturn Values:\n(Scalar)   A single \nReturns the number of permutations for a given number\n  of objects that can be selected from number objects.',
      'NORM.S.DIST': 'Syntax:\n  \nNORM.S.DIST(<Z>,<Cumulative>)\n \nReturn Values:\n(Scalar)   A single \nThe standard normal distribution (has a mean\n  of zero and a standard deviation of one. ',
      'PERCENTILE.INC': 'Syntax:\n  \nPERCENTILE.INC(<Column>,<K>)',
      'RANK.EQ': 'Syntax:\n  \nRANK.EQ(\n<Value>,\n<ColumnName>[,\n<Order>]\n)',
      'PERCENTILEX.INC': 'Syntax:\n  \nPERCENTILEX.INC(\n<Table>,\n<Expression>,\n<K>\n)',
      'POISSON.DIST': 'Syntax:\n  \nPOISSON.DIST(\n<X>,\n<Mean>,\n<Cumulative>\n)',
      'RANKX': 'Syntax:\n  \nRANKX(\n<Table>,\n<Expression>[,\n<Value>][,\n<Order>][,\n<Ties>]\n)\n \nReturn Values:\n(Scalar)   A single \nThe rank number of Value among all possible values of\n  Expression evaluated for all rows of Table numbers. ',
      'PERCENTILEX.EXC': 'Syntax:\n  \nPERCENTILEX.EXC(\n<Table>,\n<Expression>,\n<K>\n)',
      'STDEVX.P': 'Syntax:\n  \nSTDEVX.P(<Table>,<Expression>)\n \nReturn Values:\n(Scalar)   A single \nThe standard deviation of\n  the entire population. ',
      'STDEV.P': 'Syntax:\n  \nSTDEV.P(<ColumnName>)\n \nReturn Values:\n(Scalar)   A single \nThe standard deviation of\n  the entire population. ',
      'EXPON.DIST': 'Syntax:\n  \nEXPON.DIST(\n<X>,\n<Lambda>,\n<Cumulative>\n)',
      'STDEVX.S': 'Syntax:\n  \nSTDEVX.S(<Table>,<Expression>)',
      'T.DIST.RT': 'Syntax:\n  \nT.DIST.RT(<X>,<Deg_freedom>)', 'NORM.S.INV': 'Syntax:\n  \nNORM.S.INV(<Probability>)',
      'STDEV.S': 'Syntax:\n  \nSTDEV.S(<ColumnName>)',
      'T.DIST': 'Syntax:\n  \nT.DIST(\n<X>,\n<Deg_freedom>,\n<Cumulative>\n)',
      'T.INV.2T': 'Syntax:\n  \nT.INV.2T(\n<Probability>,\n<Deg_freedom>\n)\n \nReturn Values:\n(Scalar)   A single \nThe two-tailed inverse of the\n  Student’s t-distribution. ',
      'VAR.P': 'Syntax:\n  \nVAR.P(<ColumnName>)\n \nReturn Values:\n(Scalar)   A single \nA number with the variance\n  of the entire population. ',
      'VARX.P': 'Syntax:\n  \nVARX.P(<Table>,<Expression>)\n \nReturn Values:\n(Scalar)   A single \nA number with the variance\n  of the entire population. ',
      'SAMPLE': 'Syntax:\n  \nSAMPLE(\n<Size>,\n<Table>,\n<OrderBy>[,[\n<Order>][,\n<OrderBy>[,[\n<Order>][,…]]]]\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table consisting of a sample of Size rows of table or an empty table if Size\n  is 0 (zero) or less. ',
      'T.INV': 'Syntax:\n  \nT.INV(\n<Probability>,\n<Deg_freedom>\n)\n \nReturn Values:\n(Scalar)   A single \nThe left-tailed inverse of the Student’s t-distribution.\n  ',
      'ADDCOLUMNS': 'Syntax:\n  \nADDCOLUMNS(\n<Table>,\n<Name>,\n<Expression>[,\n<Name>,\n<Expression>[,…]]\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table with all its original\n  columns and the added ones.',
      'VARX.S': 'Syntax:\n  \nVARX.S(<Table>,<Expression>)\n \nReturn Values:\n(Scalar)   A single \nA number that represents the variance\n  of a sample population. ',
      'VAR.S': 'Syntax:\n  \nVAR.S(<ColumnName>)\n \nReturn Values:\n(Scalar)   A single \nA number that represents the variance\n  of a sample population. ',
      'T.DIST.2T': 'Syntax:\n  \nT.DIST.2T(<X>,<Deg_freedom>)',
      'GENERATEALL': 'Syntax:\n  \nGENERATEALL(<Table1>,<Table2>)', 'DETAILROWS': 'Syntax:\n  \nDETAILROWS(<Measure>)',
      'DISTINCT': 'Syntax:\n  \nDISTINCT(\n<ColumnNameOrTableExpr>\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA column of unique values if the parameter is a single column. If the parameter is a\n  table expression, the result has the same columns and remove only duplicated rows.',
      'FILTERS': 'Syntax:\n  \nFILTERS(<ColumnName>)',
      'CROSSJOIN': 'Syntax:\n  \nCROSSJOIN(\n<Table>[,\n<Table>[,…]]\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table that contains the Cartesian product of all\n  rows from all tables in the arguments.',
      'NATURALLEFTOUTERJOIN': 'Syntax:\n  \nNATURALLEFTOUTERJOIN(\n<LeftTable>,\n<RightTable>\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table which includes only rows from RightTable for which the values in the common columns specified are also present in LeftTable.\n  The table returned will have the common columns from the left table and the other columns from both the tables. ',
      'NATURALINNERJOIN': 'Syntax:\n  \nNATURALINNERJOIN(\n<LeftTable>,\n<RightTable>\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table which includes only rows for which the values in the common columns specified are present in both tables. The\n  table returned will have the common columns from the left table and other columns from both the tables. ',
      'GROUPBY': 'Syntax:\n  \nGROUPBY(\n<Table>[,\n<GroupBy_ColumnName>[,[\n<Name>][,[\n<Expression>][,\n<GroupBy_ColumnName>[,[\n<Name>][,[\n<Expression>][,…]]]]]]]\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table with the selected columns for the GroupBy_columnName arguments and the grouped by columns designated by\n  the name arguments. ',
      'ADDMISSINGITEMS': 'Syntax:\n  \nADDMISSINGITEMS([\n<ShowAll_ColumnName>[,\n<ShowAll_ColumnName>[,…]]],\n<Table>[,\n<GroupBy_ColumnName>[,[\n<FilterTable>][,\n<GroupBy_ColumnName>[,[\n<FilterTable>][,…]]]]]]\n)',
      'NONVISUAL': 'Syntax:\n  \nNONVISUAL(<Expression>)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table of\n  values.',
      'IGNORE': 'Syntax:\n  \nIGNORE(<Measure_Expression>)', 'CURRENTGROUP': 'Syntax:\n  \nCURRENTGROUP()',
      'EXCEPT': 'Syntax:\n  \nEXCEPT(\n<LeftTable>,\n<RightTable>\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table that contains the rows of the LeftTable minus\n  all the rows of the RightTable. ',
      'INTERSECT': 'Syntax:\n  \nINTERSECT(\n<LeftTable>,\n<RightTable>\n)',
      'ROLLUPGROUP': 'Syntax:\n  \nROLLUPGROUP(\n<GroupBy_ColumnName>[,\n<GroupBy_ColumnName>[,…]]\n)',
      'GENERATESERIES': 'Syntax:\n  \nGENERATESERIES(\n<StartValue>,\n<EndValue>[,\n<IncrementValue>]\n)',
      'ROLLUPADDISSUBTOTAL': 'Syntax:\n  \nROLLUPADDISSUBTOTAL([\n<GrandtotalFilter>],\n<GroupBy_ColumnName>,\n<Name>[,[\n<GroupLevelFilter>][,\n<GroupBy_ColumnName>,\n<Name>[,[\n<GroupLevelFilter>][,…]]]]\n)',
      'GENERATE': 'Syntax:\n  \nGENERATE(<Table1>,<Table2>)',
      'ROLLUP': 'Syntax:\n  \nROLLUP(\n<GroupBy_ColumnName>[,\n<GroupBy_ColumnName>[,…]]\n)',
      'SUMMARIZE': 'Syntax:\n  \nSUMMARIZE(\n<Table>[,\n<GroupBy_ColumnName>[,[\n<Name>][,[\n<Expression>][,\n<GroupBy_ColumnName>[,[\n<Name>][,[\n<Expression>][,…]]]]]]]\n)',
      'ROW': 'Syntax:\n  \nROW(\n<Name>,\n<Expression>[,\n<Name>,\n<Expression>[,…]]\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA single row\n  table.',
      'TOPNSKIP': 'Syntax:\n  \nTOPNSKIP(\n<Rows>,\n<Skip>,\n<Table>[,\n<OrderBy_Expression>[,[\n<Order>][,\n<OrderBy_Expression>[,[\n<Order>][,…]]]]]\n)',
      'ROLLUPISSUBTOTAL': 'Syntax:\n  \nROLLUPISSUBTOTAL([\n<GrandtotalFilter>],\n<GroupBy_ColumnName>,\n<IsSubtotal_ColumnName>[,[\n<GroupLevelFilter>][,\n<GroupBy_ColumnName>,\n<IsSubtotal_ColumnName>[,[\n<GroupLevelFilter>][,…]]]]\n)',
      'SELECTCOLUMNS': 'Syntax:\n  \nSELECTCOLUMNS(\n<Table>,\n<Name>,\n<Expression>[,\n<Name>,\n<Expression>[,…]]\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table with the same number of rows as the table specified as the first argument. The returned table has one column for each pair\n  of Name, Expression arguments, and each expression is evaluated in the context of a row from the specified Table argument. ',
      'UNION': 'Syntax:\n  \nUNION(\n<Table>,\n<Table>[,\n<Table>[,…]]\n)',
      'VALUES': 'Syntax:\n  \nVALUES(<TableNameOrColumnName>)',
      'CONCATENATE': 'Syntax:\n  \nCONCATENATE(<Text1>,<Text2>)',
      'SUBSTITUTEWITHINDEX': 'Syntax:\n  \nSUBSTITUTEWITHINDEX(\n<Table>,\n<Name>,\n<SemiJoinIndexTable>,\n<Expression>[,[\n<Order>][,\n<Expression>[,[\n<Order>][,…]]]]\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table which includes only those values present in the indexColumnsTable table and which has an index column instead of all columns present (by name) in the\n  indexColumnsTable table. ',
      'TREATAS': 'Syntax:\n  \nTREATAS(\n<Expression>,\n<ColumnName>[,\n<ColumnName>[,…]]\n)',
      'COMBINEVALUES': 'Syntax:\n  \nCOMBINEVALUES(\n<Delimiter>,\n<Expression1>,\n<Expression2>[,\n<Expression2>[,…]]\n)',
      'SUMMARIZECOLUMNS': 'Syntax:\n  \nSUMMARIZECOLUMNS([\n<GroupBy_ColumnName>[,[\n<FilterTable>][,[\n<Name>][,[\n<Expression>][,\n<GroupBy_ColumnName>[,[\n<FilterTable>][,[\n<Name>][,[\n<Expression>][,…]]]]]]]]]\n)',
      'TOPN': 'Syntax:\n  \nTOPN(\n<N_Value>,\n<Table>[,\n<OrderBy_Expression>[,[\n<Order>][,\n<OrderBy_Expression>[,[\n<Order>][,…]]]]]\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table with the top N_value rows of Table\n  or an empty table if N_value is 0 (zero).',
      'DATATABLE': 'Syntax:\n  \nDATATABLE(\n<name>,\n<type>[,\n<name>,\n<type>[,…]],\n<data>\n)\n \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table declaring an inline\n  set of values.',
      'CONCATENATEX': 'Syntax:\n  \nCONCATENATEX(\n<Table>,\n<Expression>[,\n<Delimiter>][,\n<OrderBy_Expression>[,[\n<Order>][,\n<OrderBy_Expression>[,[\n<Order>][,…]]]]]\n)\n \nReturn Values:\n(Scalar)   A single \nA text string with the\n  concatenated values.',
      'TOPNPERLEVEL': 'Syntax:\n  \nTOPNPERLEVEL(\n<Rows>,\n<Table>,\n<LevelsDefinition>,\n<NodesExpanded>,\n<LevelsBoundaries>,\n<RestartIndicatorColumnName>\n)',
      'EXACT': 'Syntax:\n  \nEXACT(<Text1>,<Text2>)',
      'FIND': 'Syntax:\n  \nFIND(\n<FindText>,\n<WithinText>[,\n<StartPosition>][,\n<NotFoundValue>]\n)\n \nReturn Values:\n(Scalar)   A single \nNumber that shows the starting point of the\n  text string you want to find. ',
      'FORMAT': 'Syntax:\n  \nFORMAT(<Value>,<Format>)',
      'REPLACE': 'Syntax:\n  \nREPLACE(\n<OldText>,\n<StartPosition>,\n<NumberOfCharacters>,\n<NewText>\n)\n \nReturn Values:\n(Scalar)   A single \nThe resulting string after\n  applying the replacements.',
      'RIGHT': 'Syntax:\n  \nRIGHT(\n<Text>[,\n<NumberOfCharacters>]\n)',
      'FIXED': 'Syntax:\n  \nFIXED(\n<Number>[,\n<Decimals>][,\n<NoCommas>]\n)',
      'UNICODE': 'Syntax:\n  \nUNICODE(<Text>)\n \nReturn Values:\n(Scalar)   A single \nA numeric code for the first\n  character in a text string. ',
      'SEARCH': 'Syntax:\n  \nSEARCH(\n<FindText>,\n<WithinText>[,\n<StartPosition>][,\n<NotFoundValue>]\n)\n \nReturn Values:\n(Scalar)   A single \nThe number of the starting position of the first text string from the first character of the\n  second text string. ',
      'LOWER': 'Syntax:\n  \nLOWER(<Text>)',
      'UNICHAR': 'Syntax:\n  \nUNICHAR(<Number>)\n \nReturn Values:\n(Scalar)   A single \nA character represented\n  by the Unicode number.',
      'REPT': 'Syntax:\n  \nREPT(<Text>,<NumberOfTimes>)\n \nReturn Values:\n(Scalar)   A single \nA string containing\n  the changes.',
      'LEFT': 'Syntax:\n  \nLEFT(\n<Text>[,\n<NumberOfCharacters>]\n)', 'LEN': 'Syntax:\n  \nLEN(<Text>)',
      'CLOSINGBALANCEYEAR': 'Syntax:\n  \nCLOSINGBALANCEYEAR(\n<Expression>,\n<Dates>[,\n<Filter>][,\n<YearEndDate>]\n)',
      'CLOSINGBALANCEMONTH': 'Syntax:\n  \nCLOSINGBALANCEMONTH(\n<Expression>,\n<Dates>[,\n<Filter>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value that represents the expression evaluated\n  at the last date of the month in the current context.',
      'TRIM': 'Syntax:\n  \nTRIM(<Text>)\n \nReturn Values:\n(Scalar)   A single \nThe string with spaces\n  removed. ',
      'DATESBETWEEN': 'Syntax:\n  \nDATESBETWEEN(\n<Dates>,\n<StartDate>,\n<EndDate>\n)',
      'DATESMTD': 'Syntax:\n  \nDATESMTD(<Dates>)',
      'DATESINPERIOD': 'Syntax:\n  \nDATESINPERIOD(\n<Dates>,\n<StartDate>,\n<NumberOfIntervals>,\n<Interval>\n)\n \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column\n  of unique date values.',
      'MID': 'Syntax:\n  \nMID(\n<Text>,\n<StartPosition>,\n<NumberOfCharacters>\n)\n \nReturn Values:\n(Scalar)   A single \nA string of text of the\n  specified length.',
      'UPPER': 'Syntax:\n  \nUPPER(<Text>)',
      'DATEADD': 'Syntax:\n  \nDATEADD(\n<Dates>,\n<NumberOfIntervals>,\n<Interval>\n)',
      'ENDOFYEAR': 'Syntax:\n  \nENDOFYEAR(\n<Dates>[,\n<YearEndDate>]\n)',
      'DATESYTD': 'Syntax:\n  \nDATESYTD(\n<Dates>[,\n<YearEndDate>]\n)',
      'FIRSTNONBLANKVALUE': 'Syntax:\n  \nFIRSTNONBLANKVALUE(\n<ColumnName>,\n<Expression>\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nThe first non-blank value evaluated by\n  the Expression iterating ColumnName.',
      'DATESQTD': 'Syntax:\n  \nDATESQTD(<Dates>)',
      'CLOSINGBALANCEQUARTER': 'Syntax:\n  \nCLOSINGBALANCEQUARTER(\n<Expression>,\n<Dates>[,\n<Filter>]\n)',
      'FIRSTNONBLANK': 'Syntax:\n  \nFIRSTNONBLANK(\n<ColumnName>,\n<Expression>\n)',
      'LASTNONBLANKVALUE': 'Syntax:\n  \nLASTNONBLANKVALUE(\n<ColumnName>,\n<Expression>\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nThe last non-blank value evaluated by\n  the Expression iterating ColumnName.',
      'ENDOFQUARTER': 'Syntax:\n  \nENDOFQUARTER(<Dates>)', 'NEXTMONTH': 'Syntax:\n  \nNEXTMONTH(<Dates>)',
      'ENDOFMONTH': 'Syntax:\n  \nENDOFMONTH(<Dates>)\n \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column\n  and single row with a date value.',
      'LASTNONBLANK': 'Syntax:\n  \nLASTNONBLANK(\n<ColumnName>,\n<Expression>\n)\n \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column and single\n  row with the computed last value.',
      'NEXTQUARTER': 'Syntax:\n  \nNEXTQUARTER(<Dates>)',
      'OPENINGBALANCEMONTH': 'Syntax:\n  \nOPENINGBALANCEMONTH(\n<Expression>,\n<Dates>[,\n<Filter>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value that represents the expression evaluated\n  at the first date of the month in the current context.',
      'NEXTDAY': 'Syntax:\n  \nNEXTDAY(<Dates>)',
      'PARALLELPERIOD': 'Syntax:\n  \nPARALLELPERIOD(\n<Dates>,\n<NumberOfIntervals>,\n<Interval>\n)',
      'OPENINGBALANCEQUARTER': 'Syntax:\n  \nOPENINGBALANCEQUARTER(\n<Expression>,\n<Dates>[,\n<Filter>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value that represents the expression evaluated at the\n  first date of the quarter in the current context.',
      'FIRSTDATE': 'Syntax:\n  \nFIRSTDATE(<Dates>)', 'PREVIOUSQUARTER': 'Syntax:\n  \nPREVIOUSQUARTER(<Dates>)',
      'OPENINGBALANCEYEAR': 'Syntax:\n  \nOPENINGBALANCEYEAR(\n<Expression>,\n<Dates>[,\n<Filter>][,\n<YearEndDate>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value that represents the expression evaluated at the\n  first date of the quarter in the current context.',
      'STARTOFQUARTER': 'Syntax:\n  \nSTARTOFQUARTER(<Dates>)\n \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column\n  and single row with a date value.',
      'PREVIOUSMONTH': 'Syntax:\n  \nPREVIOUSMONTH(<Dates>)',
      'PREVIOUSYEAR': 'Syntax:\n  \nPREVIOUSYEAR(\n<Dates>[,\n<YearEndDate>]\n)',
      'LASTDATE': 'Syntax:\n  \nLASTDATE(<Dates>)',
      'VALUE': 'Syntax:\n  \nVALUE(<Text>)\n \nReturn Values:\n(Scalar)   A single \nThe converted number in decimal\n  data type. ',
      'NEXTYEAR': 'Syntax:\n  \nNEXTYEAR(\n<Dates>[,\n<YearEndDate>]\n)',
      'SUBSTITUTE': 'Syntax:\n  \nSUBSTITUTE(\n<Text>,\n<OldText>,\n<NewText>[,\n<InstanceNumber>]\n)',
      'PREVIOUSDAY': 'Syntax:\n  \nPREVIOUSDAY(<Dates>)',
      'DISTINCTCOUNT': 'Syntax:\n  \nDISTINCTCOUNT(<ColumnName>)\n \nReturn Values:\n(Scalar)   A single \nThe number of distinct\n  values in ColumnName. ',
      'STARTOFYEAR': 'Syntax:\n  \nSTARTOFYEAR(\n<Dates>[,\n<YearEndDate>]\n)\n \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column\n  and single row with a date value.',
      'STARTOFMONTH': 'Syntax:\n  \nSTARTOFMONTH(<Dates>)\n \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column\n  and single row with a date value.',
      'TOTALMTD': 'Syntax:\n  \nTOTALMTD(\n<Expression>,\n<Dates>[,\n<Filter>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value that represents the Expression evaluated for the\n  Dates in the current month-to-date, given the dates in Dates. ',
      'SAMEPERIODLASTYEAR': 'Syntax:\n  \nSAMEPERIODLASTYEAR(<Dates>)\n \nReturn Values:\n(Table)   A table with a single column.\nThe corresponding dates\n  in the previous year.',
      'TOTALQTD': 'Syntax:\n  \nTOTALQTD(\n<Expression>,\n<Dates>[,\n<Filter>]\n)',
      'TOTALYTD': 'Syntax:\n  \nTOTALYTD(\n<Expression>,\n<Dates>[,\n<Filter>][,\n<YearEndDate>]\n)\n \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value that represents the Expression evaluated for the\n  Dates in the current year-to-date, given the dates in Dates. '},
     {'Aggregation': ['APPROXIMATEDISTINCTCOUNT', 'AVERAGE', 'AVERAGEA', 'AVERAGEX', 'COUNT', 'COUNTA', 'COUNTAX',
                      'COUNTBLANK', 'COUNTROWS', 'COUNTX', 'DISTINCTCOUNT', 'DISTINCTCOUNTNOBLANK', 'MAX', 'MAXA',
                      'MAXX', 'MIN', 'MINA', 'MINX', 'PRODUCT', 'PRODUCTX', 'SUM', 'SUMX'],
      'Date and Time': ['CALENDAR', 'CALENDARAUTO', 'DATE', 'DATEDIFF', 'DATEVALUE', 'DAY', 'EDATE', 'EOMONTH', 'HOUR',
                        'MINUTE', 'MONTH', 'NOW', 'QUARTER', 'SECOND', 'TIME', 'TIMEVALUE', 'TODAY', 'UTCNOW',
                        'UTCTODAY', 'WEEKDAY', 'WEEKNUM', 'YEAR', 'YEARFRAC'],
      'Filter': ['ALL', 'ALLCROSSFILTERED', 'ALLEXCEPT', 'ALLNOBLANKROW', 'ALLSELECTED', 'CALCULATE', 'CALCULATETABLE',
                 'FILTER', 'KEEPFILTERS', 'LOOKUPVALUE', 'REMOVEFILTERS', 'SELECTEDVALUE'],
      'Financial': ['ACCRINT', 'ACCRINTM', 'AMORDEGRC', 'AMORLINC', 'COUPDAYBS', 'COUPDAYS', 'COUPDAYSNC', 'COUPNCD',
                    'COUPNUM', 'COUPPCD', 'CUMIPMT', 'CUMPRINC', 'DB', 'DDB', 'DISC', 'DOLLARDE', 'DOLLARFR',
                    'DURATION', 'EFFECT', 'FV', 'INTRATE', 'IPMT', 'ISPMT', 'MDURATION', 'NOMINAL', 'NPER', 'ODDFPRICE',
                    'ODDFYIELD', 'ODDLPRICE', 'ODDLYIELD', 'PDURATION', 'PMT', 'PPMT', 'PRICE', 'PRICEDISC', 'PRICEMAT',
                    'PV', 'RATE', 'RECEIVED', 'RRI', 'SLN', 'SYD', 'TBILLEQ', 'TBILLPRICE', 'TBILLYIELD', 'VDB', 'XIRR',
                    'XNPV', 'YIELD', 'YIELDDISC', 'YIELDMAT'],
      'Information': ['CONTAINS', 'CONTAINSROW', 'CONTAINSSTRING', 'CONTAINSSTRINGEXACT', 'CUSTOMDATA', 'HASONEFILTER',
                      'HASONEVALUE', 'ISAFTER', 'ISBLANK', 'ISCROSSFILTERED', 'ISEMPTY', 'ISERROR', 'ISEVEN',
                      'ISFILTERED', 'ISINSCOPE', 'ISLOGICAL', 'ISNONTEXT', 'ISNUMBER', 'ISODD', 'ISONORAFTER',
                      'ISSELECTEDMEASURE', 'ISSUBTOTAL', 'ISTEXT', 'SELECTEDMEASURE', 'SELECTEDMEASUREFORMATSTRING',
                      'SELECTEDMEASURENAME', 'USERCULTURE', 'USERNAME', 'USEROBJECTID', 'USERPRINCIPALNAME'],
      'Logical': ['AND', 'COALESCE', 'FALSE', 'IF', 'IF.EAGER', 'IFERROR', 'NOT', 'OR', 'SWITCH', 'TRUE'],
      'Math and Trig': ['ABS', 'ACOS', 'ACOSH', 'ACOT', 'ACOTH', 'ASIN', 'ASINH', 'ATAN', 'ATANH', 'CEILING', 'CONVERT',
                        'COS', 'COSH', 'COT', 'COTH', 'CURRENCY', 'DEGREES', 'DIVIDE', 'EVEN', 'EXP', 'FACT', 'FLOOR',
                        'GCD', 'INT', 'ISO.CEILING', 'LCM', 'LN', 'LOG', 'LOG10', 'MOD', 'MROUND', 'ODD', 'PI', 'POWER',
                        'QUOTIENT', 'RADIANS', 'RAND', 'RANDBETWEEN', 'ROUND', 'ROUNDDOWN', 'ROUNDUP', 'SIGN', 'SIN',
                        'SINH', 'SQRT', 'SQRTPI', 'TAN', 'TANH', 'TRUNC'],
      'Other': ['BLANK', 'EARLIER', 'EARLIEST', 'ERROR', 'KEYWORDMATCH'],
      'Parent-child': ['PATH', 'PATHCONTAINS', 'PATHITEM', 'PATHITEMREVERSE', 'PATHLENGTH'],
      'Relationships management': ['CROSSFILTER', 'RELATED', 'RELATEDTABLE', 'USERELATIONSHIP'],
      'Statistical': ['BETA.DIST', 'BETA.INV', 'CHISQ.DIST', 'CHISQ.DIST.RT', 'CHISQ.INV', 'CHISQ.INV.RT', 'COMBIN',
                      'COMBINA', 'CONFIDENCE.NORM', 'CONFIDENCE.T', 'EXPON.DIST', 'GEOMEAN', 'GEOMEANX', 'MEDIAN',
                      'MEDIANX', 'NORM.DIST', 'NORM.INV', 'NORM.S.DIST', 'NORM.S.INV', 'PERCENTILE.EXC',
                      'PERCENTILE.INC', 'PERCENTILEX.EXC', 'PERCENTILEX.INC', 'PERMUT', 'POISSON.DIST', 'RANK.EQ',
                      'RANKX', 'SAMPLE', 'STDEV.P', 'STDEV.S', 'STDEVX.P', 'STDEVX.S', 'T.DIST', 'T.DIST.2T',
                      'T.DIST.RT', 'T.INV', 'T.INV.2T', 'VAR.P', 'VAR.S', 'VARX.P', 'VARX.S'],
      'Table manipulation': ['ADDCOLUMNS', 'ADDMISSINGITEMS', 'CROSSJOIN', 'CURRENTGROUP', 'DATATABLE', 'DETAILROWS',
                             'DISTINCT', 'EXCEPT', 'FILTERS', 'GENERATE', 'GENERATEALL', 'GENERATESERIES', 'GROUPBY',
                             'IGNORE', 'INTERSECT', 'NATURALINNERJOIN', 'NATURALLEFTOUTERJOIN', 'NONVISUAL', 'ROLLUP',
                             'ROLLUPADDISSUBTOTAL', 'ROLLUPGROUP', 'ROLLUPISSUBTOTAL', 'ROW', 'SELECTCOLUMNS',
                             'SUBSTITUTEWITHINDEX', 'SUMMARIZE', 'SUMMARIZECOLUMNS', 'TOPN', 'TOPNPERLEVEL', 'TOPNSKIP',
                             'TREATAS', 'UNION', 'VALUES'],
      'Text': ['COMBINEVALUES', 'CONCATENATE', 'CONCATENATEX', 'EXACT', 'FIND', 'FIXED', 'FORMAT', 'LEFT', 'LEN',
               'LOWER', 'MID', 'REPLACE', 'REPT', 'RIGHT', 'SEARCH', 'SUBSTITUTE', 'TRIM', 'UNICHAR', 'UNICODE',
               'UPPER', 'VALUE'],
      'Time Intelligence': ['CLOSINGBALANCEMONTH', 'CLOSINGBALANCEQUARTER', 'CLOSINGBALANCEYEAR', 'DATEADD',
                            'DATESBETWEEN', 'DATESINPERIOD', 'DATESMTD', 'DATESQTD', 'DATESYTD', 'ENDOFMONTH',
                            'ENDOFQUARTER', 'ENDOFYEAR', 'FIRSTDATE', 'FIRSTNONBLANK', 'FIRSTNONBLANKVALUE', 'LASTDATE',
                            'LASTNONBLANK', 'LASTNONBLANKVALUE', 'NEXTDAY', 'NEXTMONTH', 'NEXTQUARTER', 'NEXTYEAR',
                            'OPENINGBALANCEMONTH', 'OPENINGBALANCEQUARTER', 'OPENINGBALANCEYEAR', 'PARALLELPERIOD',
                            'PREVIOUSDAY', 'PREVIOUSMONTH', 'PREVIOUSQUARTER', 'PREVIOUSYEAR', 'SAMEPERIODLASTYEAR',
                            'STARTOFMONTH', 'STARTOFQUARTER', 'STARTOFYEAR', 'TOTALMTD', 'TOTALQTD', 'TOTALYTD']},
     [{'APPROXIMATEDISTINCTCOUNT': 'https://dax.guide/approximatedistinctcount/'},
      {'AVERAGE': 'https://dax.guide/average/'}, {'AVERAGEA': 'https://dax.guide/averagea/'},
      {'AVERAGEX': 'https://dax.guide/averagex/'}, {'COUNT': 'https://dax.guide/count/'},
      {'COUNTA': 'https://dax.guide/counta/'}, {'COUNTAX': 'https://dax.guide/countax/'},
      {'COUNTBLANK': 'https://dax.guide/countblank/'}, {'COUNTROWS': 'https://dax.guide/countrows/'},
      {'COUNTX': 'https://dax.guide/countx/'}, {'DISTINCTCOUNT': 'https://dax.guide/distinctcount/'},
      {'DISTINCTCOUNTNOBLANK': 'https://dax.guide/distinctcountnoblank/'}, {'MAX': 'https://dax.guide/max/'},
      {'MAXA': 'https://dax.guide/maxa/'}, {'MAXX': 'https://dax.guide/maxx/'}, {'MIN': 'https://dax.guide/min/'},
      {'MINA': 'https://dax.guide/mina/'}, {'MINX': 'https://dax.guide/minx/'},
      {'PRODUCT': 'https://dax.guide/product/'}, {'PRODUCTX': 'https://dax.guide/productx/'},
      {'SUM': 'https://dax.guide/sum/'}, {'SUMX': 'https://dax.guide/sumx/'},
      {'CALENDAR': 'https://dax.guide/calendar/'}, {'CALENDARAUTO': 'https://dax.guide/calendarauto/'},
      {'DATE': 'https://dax.guide/date/'}, {'DATEDIFF': 'https://dax.guide/datediff/'},
      {'DATEVALUE': 'https://dax.guide/datevalue/'}, {'DAY': 'https://dax.guide/day/'},
      {'EDATE': 'https://dax.guide/edate/'}, {'EOMONTH': 'https://dax.guide/eomonth/'},
      {'HOUR': 'https://dax.guide/hour/'}, {'MINUTE': 'https://dax.guide/minute/'},
      {'MONTH': 'https://dax.guide/month/'}, {'NOW': 'https://dax.guide/now/'},
      {'QUARTER': 'https://dax.guide/quarter/'}, {'SECOND': 'https://dax.guide/second/'},
      {'TIME': 'https://dax.guide/time/'}, {'TIMEVALUE': 'https://dax.guide/timevalue/'},
      {'TODAY': 'https://dax.guide/today/'}, {'UTCNOW': 'https://dax.guide/utcnow/'},
      {'UTCTODAY': 'https://dax.guide/utctoday/'}, {'WEEKDAY': 'https://dax.guide/weekday/'},
      {'WEEKNUM': 'https://dax.guide/weeknum/'}, {'YEAR': 'https://dax.guide/year/'},
      {'YEARFRAC': 'https://dax.guide/yearfrac/'}, {'ALL': 'https://dax.guide/all/'},
      {'ALLCROSSFILTERED': 'https://dax.guide/allcrossfiltered/'}, {'ALLEXCEPT': 'https://dax.guide/allexcept/'},
      {'ALLNOBLANKROW': 'https://dax.guide/allnoblankrow/'}, {'ALLSELECTED': 'https://dax.guide/allselected/'},
      {'CALCULATE': 'https://dax.guide/calculate/'}, {'CALCULATETABLE': 'https://dax.guide/calculatetable/'},
      {'FILTER': 'https://dax.guide/filter/'}, {'KEEPFILTERS': 'https://dax.guide/keepfilters/'},
      {'LOOKUPVALUE': 'https://dax.guide/lookupvalue/'}, {'REMOVEFILTERS': 'https://dax.guide/removefilters/'},
      {'SELECTEDVALUE': 'https://dax.guide/selectedvalue/'}, {'ACCRINT': 'https://dax.guide/accrint/'},
      {'ACCRINTM': 'https://dax.guide/accrintm/'}, {'AMORDEGRC': 'https://dax.guide/amordegrc/'},
      {'AMORLINC': 'https://dax.guide/amorlinc/'}, {'COUPDAYBS': 'https://dax.guide/coupdaybs/'},
      {'COUPDAYS': 'https://dax.guide/coupdays/'}, {'COUPDAYSNC': 'https://dax.guide/coupdaysnc/'},
      {'COUPNCD': 'https://dax.guide/coupncd/'}, {'COUPNUM': 'https://dax.guide/coupnum/'},
      {'COUPPCD': 'https://dax.guide/couppcd/'}, {'CUMIPMT': 'https://dax.guide/cumipmt/'},
      {'CUMPRINC': 'https://dax.guide/cumprinc/'}, {'DB': 'https://dax.guide/db/'}, {'DDB': 'https://dax.guide/ddb/'},
      {'DISC': 'https://dax.guide/disc/'}, {'DOLLARDE': 'https://dax.guide/dollarde/'},
      {'DOLLARFR': 'https://dax.guide/dollarfr/'}, {'DURATION': 'https://dax.guide/duration/'},
      {'EFFECT': 'https://dax.guide/effect/'}, {'FV': 'https://dax.guide/fv/'},
      {'INTRATE': 'https://dax.guide/intrate/'}, {'IPMT': 'https://dax.guide/ipmt/'},
      {'ISPMT': 'https://dax.guide/ispmt/'}, {'MDURATION': 'https://dax.guide/mduration/'},
      {'NOMINAL': 'https://dax.guide/nominal/'}, {'NPER': 'https://dax.guide/nper/'},
      {'ODDFPRICE': 'https://dax.guide/oddfprice/'}, {'ODDFYIELD': 'https://dax.guide/oddfyield/'},
      {'ODDLPRICE': 'https://dax.guide/oddlprice/'}, {'ODDLYIELD': 'https://dax.guide/oddlyield/'},
      {'PDURATION': 'https://dax.guide/pduration/'}, {'PMT': 'https://dax.guide/pmt/'},
      {'PPMT': 'https://dax.guide/ppmt/'}, {'PRICE': 'https://dax.guide/price/'},
      {'PRICEDISC': 'https://dax.guide/pricedisc/'}, {'PRICEMAT': 'https://dax.guide/pricemat/'},
      {'PV': 'https://dax.guide/pv/'}, {'RATE': 'https://dax.guide/rate/'}, {'RECEIVED': 'https://dax.guide/received/'},
      {'RRI': 'https://dax.guide/rri/'}, {'SLN': 'https://dax.guide/sln/'}, {'SYD': 'https://dax.guide/syd/'},
      {'TBILLEQ': 'https://dax.guide/tbilleq/'}, {'TBILLPRICE': 'https://dax.guide/tbillprice/'},
      {'TBILLYIELD': 'https://dax.guide/tbillyield/'}, {'VDB': 'https://dax.guide/vdb/'},
      {'XIRR': 'https://dax.guide/xirr/'}, {'XNPV': 'https://dax.guide/xnpv/'}, {'YIELD': 'https://dax.guide/yield/'},
      {'YIELDDISC': 'https://dax.guide/yielddisc/'}, {'YIELDMAT': 'https://dax.guide/yieldmat/'},
      {'CONTAINS': 'https://dax.guide/contains/'}, {'CONTAINSROW': 'https://dax.guide/containsrow/'},
      {'CONTAINSSTRING': 'https://dax.guide/containsstring/'},
      {'CONTAINSSTRINGEXACT': 'https://dax.guide/containsstringexact/'},
      {'CUSTOMDATA': 'https://dax.guide/customdata/'}, {'HASONEFILTER': 'https://dax.guide/hasonefilter/'},
      {'HASONEVALUE': 'https://dax.guide/hasonevalue/'}, {'ISAFTER': 'https://dax.guide/isafter/'},
      {'ISBLANK': 'https://dax.guide/isblank/'}, {'ISCROSSFILTERED': 'https://dax.guide/iscrossfiltered/'},
      {'ISEMPTY': 'https://dax.guide/isempty/'}, {'ISERROR': 'https://dax.guide/iserror/'},
      {'ISEVEN': 'https://dax.guide/iseven/'}, {'ISFILTERED': 'https://dax.guide/isfiltered/'},
      {'ISINSCOPE': 'https://dax.guide/isinscope/'}, {'ISLOGICAL': 'https://dax.guide/islogical/'},
      {'ISNONTEXT': 'https://dax.guide/isnontext/'}, {'ISNUMBER': 'https://dax.guide/isnumber/'},
      {'ISODD': 'https://dax.guide/isodd/'}, {'ISONORAFTER': 'https://dax.guide/isonorafter/'},
      {'ISSELECTEDMEASURE': 'https://dax.guide/isselectedmeasure/'}, {'ISSUBTOTAL': 'https://dax.guide/issubtotal/'},
      {'ISTEXT': 'https://dax.guide/istext/'}, {'SELECTEDMEASURE': 'https://dax.guide/selectedmeasure/'},
      {'SELECTEDMEASUREFORMATSTRING': 'https://dax.guide/selectedmeasureformatstring/'},
      {'SELECTEDMEASURENAME': 'https://dax.guide/selectedmeasurename/'},
      {'USERCULTURE': 'https://dax.guide/userculture/'}, {'USERNAME': 'https://dax.guide/username/'},
      {'USEROBJECTID': 'https://dax.guide/userobjectid/'},
      {'USERPRINCIPALNAME': 'https://dax.guide/userprincipalname/'}, {'AND': 'https://dax.guide/and/'},
      {'COALESCE': 'https://dax.guide/coalesce/'}, {'FALSE': 'https://dax.guide/false/'},
      {'IF': 'https://dax.guide/if/'}, {'IF.EAGER': 'https://dax.guide/if-eager/'},
      {'IFERROR': 'https://dax.guide/iferror/'}, {'NOT': 'https://dax.guide/not/'}, {'OR': 'https://dax.guide/or/'},
      {'SWITCH': 'https://dax.guide/switch/'}, {'TRUE': 'https://dax.guide/true/'}, {'ABS': 'https://dax.guide/abs/'},
      {'ACOS': 'https://dax.guide/acos/'}, {'ACOSH': 'https://dax.guide/acosh/'}, {'ACOT': 'https://dax.guide/acot/'},
      {'ACOTH': 'https://dax.guide/acoth/'}, {'ASIN': 'https://dax.guide/asin/'}, {'ASINH': 'https://dax.guide/asinh/'},
      {'ATAN': 'https://dax.guide/atan/'}, {'ATANH': 'https://dax.guide/atanh/'},
      {'CEILING': 'https://dax.guide/ceiling/'}, {'CONVERT': 'https://dax.guide/convert/'},
      {'COS': 'https://dax.guide/cos/'}, {'COSH': 'https://dax.guide/cosh/'}, {'COT': 'https://dax.guide/cot/'},
      {'COTH': 'https://dax.guide/coth/'}, {'CURRENCY': 'https://dax.guide/currency/'},
      {'DEGREES': 'https://dax.guide/degrees/'}, {'DIVIDE': 'https://dax.guide/divide/'},
      {'EVEN': 'https://dax.guide/even/'}, {'EXP': 'https://dax.guide/exp/'}, {'FACT': 'https://dax.guide/fact/'},
      {'FLOOR': 'https://dax.guide/floor/'}, {'GCD': 'https://dax.guide/gcd/'}, {'INT': 'https://dax.guide/int/'},
      {'ISO.CEILING': 'https://dax.guide/iso-ceiling/'}, {'LCM': 'https://dax.guide/lcm/'},
      {'LN': 'https://dax.guide/ln/'}, {'LOG': 'https://dax.guide/log/'}, {'LOG10': 'https://dax.guide/log10/'},
      {'MOD': 'https://dax.guide/mod/'}, {'MROUND': 'https://dax.guide/mround/'}, {'ODD': 'https://dax.guide/odd/'},
      {'PI': 'https://dax.guide/pi/'}, {'POWER': 'https://dax.guide/power/'},
      {'QUOTIENT': 'https://dax.guide/quotient/'}, {'RADIANS': 'https://dax.guide/radians/'},
      {'RAND': 'https://dax.guide/rand/'}, {'RANDBETWEEN': 'https://dax.guide/randbetween/'},
      {'ROUND': 'https://dax.guide/round/'}, {'ROUNDDOWN': 'https://dax.guide/rounddown/'},
      {'ROUNDUP': 'https://dax.guide/roundup/'}, {'SIGN': 'https://dax.guide/sign/'}, {'SIN': 'https://dax.guide/sin/'},
      {'SINH': 'https://dax.guide/sinh/'}, {'SQRT': 'https://dax.guide/sqrt/'}, {'SQRTPI': 'https://dax.guide/sqrtpi/'},
      {'TAN': 'https://dax.guide/tan/'}, {'TANH': 'https://dax.guide/tanh/'}, {'TRUNC': 'https://dax.guide/trunc/'},
      {'BLANK': 'https://dax.guide/blank/'}, {'EARLIER': 'https://dax.guide/earlier/'},
      {'EARLIEST': 'https://dax.guide/earliest/'}, {'ERROR': 'https://dax.guide/error/'},
      {'KEYWORDMATCH': 'https://dax.guide/keywordmatch/'}, {'PATH': 'https://dax.guide/path/'},
      {'PATHCONTAINS': 'https://dax.guide/pathcontains/'}, {'PATHITEM': 'https://dax.guide/pathitem/'},
      {'PATHITEMREVERSE': 'https://dax.guide/pathitemreverse/'}, {'PATHLENGTH': 'https://dax.guide/pathlength/'},
      {'CROSSFILTER': 'https://dax.guide/crossfilter/'}, {'RELATED': 'https://dax.guide/related/'},
      {'RELATEDTABLE': 'https://dax.guide/relatedtable/'}, {'USERELATIONSHIP': 'https://dax.guide/userelationship/'},
      {'BETA.DIST': 'https://dax.guide/beta-dist/'}, {'BETA.INV': 'https://dax.guide/beta-inv/'},
      {'CHISQ.DIST': 'https://dax.guide/chisq-dist/'}, {'CHISQ.DIST.RT': 'https://dax.guide/chisq-dist-rt/'},
      {'CHISQ.INV': 'https://dax.guide/chisq-inv/'}, {'CHISQ.INV.RT': 'https://dax.guide/chisq-inv-rt/'},
      {'COMBIN': 'https://dax.guide/combin/'}, {'COMBINA': 'https://dax.guide/combina/'},
      {'CONFIDENCE.NORM': 'https://dax.guide/confidence-norm/'}, {'CONFIDENCE.T': 'https://dax.guide/confidence-t/'},
      {'EXPON.DIST': 'https://dax.guide/expon-dist/'}, {'GEOMEAN': 'https://dax.guide/geomean/'},
      {'GEOMEANX': 'https://dax.guide/geomeanx/'}, {'MEDIAN': 'https://dax.guide/median/'},
      {'MEDIANX': 'https://dax.guide/medianx/'}, {'NORM.DIST': 'https://dax.guide/norm-dist/'},
      {'NORM.INV': 'https://dax.guide/norm-inv/'}, {'NORM.S.DIST': 'https://dax.guide/norm-s-dist/'},
      {'NORM.S.INV': 'https://dax.guide/norm-s-inv/'}, {'PERCENTILE.EXC': 'https://dax.guide/percentile-exc/'},
      {'PERCENTILE.INC': 'https://dax.guide/percentile-inc/'},
      {'PERCENTILEX.EXC': 'https://dax.guide/percentilex-exc/'},
      {'PERCENTILEX.INC': 'https://dax.guide/percentilex-inc/'}, {'PERMUT': 'https://dax.guide/permut/'},
      {'POISSON.DIST': 'https://dax.guide/poisson-dist/'}, {'RANK.EQ': 'https://dax.guide/rank-eq/'},
      {'RANKX': 'https://dax.guide/rankx/'}, {'SAMPLE': 'https://dax.guide/sample/'},
      {'STDEV.P': 'https://dax.guide/stdev-p/'}, {'STDEV.S': 'https://dax.guide/stdev-s/'},
      {'STDEVX.P': 'https://dax.guide/stdevx-p/'}, {'STDEVX.S': 'https://dax.guide/stdevx-s/'},
      {'T.DIST': 'https://dax.guide/t-dist/'}, {'T.DIST.2T': 'https://dax.guide/t-dist-2t/'},
      {'T.DIST.RT': 'https://dax.guide/t-dist-rt/'}, {'T.INV': 'https://dax.guide/t-inv/'},
      {'T.INV.2T': 'https://dax.guide/t-inv-2t/'}, {'VAR.P': 'https://dax.guide/var-p/'},
      {'VAR.S': 'https://dax.guide/var-s/'}, {'VARX.P': 'https://dax.guide/varx-p/'},
      {'VARX.S': 'https://dax.guide/varx-s/'}, {'ADDCOLUMNS': 'https://dax.guide/addcolumns/'},
      {'ADDMISSINGITEMS': 'https://dax.guide/addmissingitems/'}, {'CROSSJOIN': 'https://dax.guide/crossjoin/'},
      {'CURRENTGROUP': 'https://dax.guide/currentgroup/'}, {'DATATABLE': 'https://dax.guide/datatable/'},
      {'DETAILROWS': 'https://dax.guide/detailrows/'}, {'DISTINCT': 'https://dax.guide/distinct/'},
      {'EXCEPT': 'https://dax.guide/except/'}, {'FILTERS': 'https://dax.guide/filters/'},
      {'GENERATE': 'https://dax.guide/generate/'}, {'GENERATEALL': 'https://dax.guide/generateall/'},
      {'GENERATESERIES': 'https://dax.guide/generateseries/'}, {'GROUPBY': 'https://dax.guide/groupby/'},
      {'IGNORE': 'https://dax.guide/ignore/'}, {'INTERSECT': 'https://dax.guide/intersect/'},
      {'NATURALINNERJOIN': 'https://dax.guide/naturalinnerjoin/'},
      {'NATURALLEFTOUTERJOIN': 'https://dax.guide/naturalleftouterjoin/'},
      {'NONVISUAL': 'https://dax.guide/nonvisual/'}, {'ROLLUP': 'https://dax.guide/rollup/'},
      {'ROLLUPADDISSUBTOTAL': 'https://dax.guide/rollupaddissubtotal/'},
      {'ROLLUPGROUP': 'https://dax.guide/rollupgroup/'}, {'ROLLUPISSUBTOTAL': 'https://dax.guide/rollupissubtotal/'},
      {'ROW': 'https://dax.guide/row/'}, {'SELECTCOLUMNS': 'https://dax.guide/selectcolumns/'},
      {'SUBSTITUTEWITHINDEX': 'https://dax.guide/substitutewithindex/'}, {'SUMMARIZE': 'https://dax.guide/summarize/'},
      {'SUMMARIZECOLUMNS': 'https://dax.guide/summarizecolumns/'}, {'TOPN': 'https://dax.guide/topn/'},
      {'TOPNPERLEVEL': 'https://dax.guide/topnperlevel/'}, {'TOPNSKIP': 'https://dax.guide/topnskip/'},
      {'TREATAS': 'https://dax.guide/treatas/'}, {'UNION': 'https://dax.guide/union/'},
      {'VALUES': 'https://dax.guide/values/'}, {'COMBINEVALUES': 'https://dax.guide/combinevalues/'},
      {'CONCATENATE': 'https://dax.guide/concatenate/'}, {'CONCATENATEX': 'https://dax.guide/concatenatex/'},
      {'EXACT': 'https://dax.guide/exact/'}, {'FIND': 'https://dax.guide/find/'}, {'FIXED': 'https://dax.guide/fixed/'},
      {'FORMAT': 'https://dax.guide/format/'}, {'LEFT': 'https://dax.guide/left/'}, {'LEN': 'https://dax.guide/len/'},
      {'LOWER': 'https://dax.guide/lower/'}, {'MID': 'https://dax.guide/mid/'},
      {'REPLACE': 'https://dax.guide/replace/'}, {'REPT': 'https://dax.guide/rept/'},
      {'RIGHT': 'https://dax.guide/right/'}, {'SEARCH': 'https://dax.guide/search/'},
      {'SUBSTITUTE': 'https://dax.guide/substitute/'}, {'TRIM': 'https://dax.guide/trim/'},
      {'UNICHAR': 'https://dax.guide/unichar/'}, {'UNICODE': 'https://dax.guide/unicode/'},
      {'UPPER': 'https://dax.guide/upper/'}, {'VALUE': 'https://dax.guide/value/'},
      {'CLOSINGBALANCEMONTH': 'https://dax.guide/closingbalancemonth/'},
      {'CLOSINGBALANCEQUARTER': 'https://dax.guide/closingbalancequarter/'},
      {'CLOSINGBALANCEYEAR': 'https://dax.guide/closingbalanceyear/'}, {'DATEADD': 'https://dax.guide/dateadd/'},
      {'DATESBETWEEN': 'https://dax.guide/datesbetween/'}, {'DATESINPERIOD': 'https://dax.guide/datesinperiod/'},
      {'DATESMTD': 'https://dax.guide/datesmtd/'}, {'DATESQTD': 'https://dax.guide/datesqtd/'},
      {'DATESYTD': 'https://dax.guide/datesytd/'}, {'ENDOFMONTH': 'https://dax.guide/endofmonth/'},
      {'ENDOFQUARTER': 'https://dax.guide/endofquarter/'}, {'ENDOFYEAR': 'https://dax.guide/endofyear/'},
      {'FIRSTDATE': 'https://dax.guide/firstdate/'}, {'FIRSTNONBLANK': 'https://dax.guide/firstnonblank/'},
      {'FIRSTNONBLANKVALUE': 'https://dax.guide/firstnonblankvalue/'}, {'LASTDATE': 'https://dax.guide/lastdate/'},
      {'LASTNONBLANK': 'https://dax.guide/lastnonblank/'},
      {'LASTNONBLANKVALUE': 'https://dax.guide/lastnonblankvalue/'}, {'NEXTDAY': 'https://dax.guide/nextday/'},
      {'NEXTMONTH': 'https://dax.guide/nextmonth/'}, {'NEXTQUARTER': 'https://dax.guide/nextquarter/'},
      {'NEXTYEAR': 'https://dax.guide/nextyear/'}, {'OPENINGBALANCEMONTH': 'https://dax.guide/openingbalancemonth/'},
      {'OPENINGBALANCEQUARTER': 'https://dax.guide/openingbalancequarter/'},
      {'OPENINGBALANCEYEAR': 'https://dax.guide/openingbalanceyear/'},
      {'PARALLELPERIOD': 'https://dax.guide/parallelperiod/'}, {'PREVIOUSDAY': 'https://dax.guide/previousday/'},
      {'PREVIOUSMONTH': 'https://dax.guide/previousmonth/'}, {'PREVIOUSQUARTER': 'https://dax.guide/previousquarter/'},
      {'PREVIOUSYEAR': 'https://dax.guide/previousyear/'},
      {'SAMEPERIODLASTYEAR': 'https://dax.guide/sameperiodlastyear/'},
      {'STARTOFMONTH': 'https://dax.guide/startofmonth/'}, {'STARTOFQUARTER': 'https://dax.guide/startofquarter/'},
      {'STARTOFYEAR': 'https://dax.guide/startofyear/'}, {'TOTALMTD': 'https://dax.guide/totalmtd/'},
      {'TOTALQTD': 'https://dax.guide/totalqtd/'}, {'TOTALYTD': 'https://dax.guide/totalytd/'}]]

